import veryl_csr::CsrPkg::*;
// this is needed to generate code since NCLIC is generic
module instantiate (
    i_clk: input clock,
    i_rst: input reset,

    i_csr_ena : input logic      ,
    i_csr_addr: input CsrAddr    ,
    i_rs1_data: input logic  <32>,
    i_rs1     : input Reg        ,
    i_rd      : input Reg        ,
    i_csr_op  : input CsrOp      ,
    i_return  : input logic      ,

    i_lines   : input logic <8>,
) {
    inst nclic: NCLIC::<8> (
        i_clk       ,
        i_rst       ,
        i_csr_ena   ,
        i_csr_addr  ,
        i_rs1_data  ,
        i_rs1       ,
        i_rd        ,
        i_csr_op    ,
        i_return    ,
        i_lines     ,
    );
}
module NCLIC::<Vectors: u32> #(
    param Base    : CsrAddr = 'h020 as CsrAddr,
    param MaxPrio : u32     = 4               ,
    param PrioBits: u32     = $clog2(MaxPrio) ,
) (
    i_clk: input clock,
    i_rst: input reset,
    // -- CSR interface
    i_csr_ena : input logic      ,
    i_csr_addr: input CsrAddr    ,
    i_rs1_data: input logic  <32>,
    i_rs1     : input Reg        ,
    i_rd      : input Reg        ,
    i_csr_op  : input CsrOp,
    // -----
    i_return  : input logic,
    i_lines   : input logic<Vectors>,
    o_dispatch: output logic,
    o_depth: output logic<2>,
) {
    // this one is combinational
    var dispatch: logic;
    // this one holds the dispatch state for the rest of the cycle
    var dispatch_latch: logic;
    // state stack
    var prio_stack: logic<2> [4]; // 4 prio levels so max depth = 4 
    var id_stack: logic<3> [4];
    // current state stack depth
    var current_depth: logic<2>;
    // output signals
    assign o_depth = current_depth;
    assign o_dispatch = dispatch | dispatch_latch;
    
    // config: [PrioBits bit prio |1 bit pend | 1 bit ena]
    // for now this is unused
    struct ConfigCSR {
        prio: logic<PrioBits>,
        pending: logic,
        enabled: logic,
    }
    // this one contains the prio & enabled & pended status for each interrupt
    var masked_prios: logic<PrioBits> [Vectors];
    // this one contains the config ([PrioBits bit prio|1 bit pend|1 bit enable]) of each interrupt
    var config_regs: logic<32> [Vectors];
    // intermediate signals from the CSR interface to the underlying register
    var config_reg_data_int: logic<32> [Vectors];
    var config_reg_we_int: logic [Vectors]; 
    // dispatching status for each of the interrupts
    var dispatching: logic [Vectors];
    for i in 0..Vectors :config_csrs {
        // CSR interface for each of the interrupts
        inst csr_prio: veryl_csr::Csr #(
            Addr      : (Base + i as CsrAddr) as CsrAddr,
            FieldWidth: 2+1+1                    ,

        ) (
            i_csr_ena                              ,
            i_csr_addr                             ,
            i_rs1_data                             ,
            i_rs1                                  ,
            i_rd                                   ,
            i_csr_op                               ,
            i_reg_data  : config_regs[i]           ,
            o_reg_w_ena : config_reg_we_int[i],
            o_reg_w_data: config_reg_data_int[i]      ,
            // don't cares for now
            o_reg_r_ena : _,
            o_reg_r_data: _,
        );
        // state machinery for the underlying registers
        always_ff {
            if_reset {
                // reset state
                config_regs[i] = 0;
            } else {
                // if there is no external interrupt coming in
                if !i_lines[i]{
                    // if there is a write to this specific CSR
                    if config_reg_we_int[i] {
                        // if we are already dispatching this interrupt, do not set the pend bit
                        if dispatching[i] {
                            config_regs[i] = config_reg_data_int[i] & 'b1101 as 32;
                        }
                        // otherwise just forward the interface data directly to the register
                        else {
                            config_regs[i] = config_reg_data_int[i];
                        }
                    } else if dispatching[i] { // if there is no write being made, check if we are dispatching this interrupt and zero the pend bit in that case.
                        config_regs[i] = config_regs[i] & 'b1101 as 32;
                    }
                }
                // if there is an external interrupt coming in
                if i_lines[i] {
                    // if we happen to be writing to the CSR also
                    if config_reg_we_int[i] {
                        // if we are dispatching the interrupt already, do not set the pend bit.
                        // i don't know which behavior we actually want, but this seems reasonable for now.
                        if dispatching[i] {
                            config_regs[i] = config_reg_data_int[i] &'b1101 as 32;
                        }
                        // if we are not dispatching this interrupt, make sure that the pending bit is set by 
                        // the external interrupt
                        else {
                            config_regs[i] = config_reg_data_int[i] | 'b0010 as 32;
                        }
                    }
                    // if we are already dispatching this interrupt, do not set the pend bit
                    else if dispatching[i] {
                        config_regs[i] = config_regs[i] & 'b1101 as 32;
                    } // otherwise make sure the pending bit is set by this external interrupt
                    else {
                        config_regs[i] = config_regs[i] | 'b0010 as 32;
                    }
                }
            }

        }
        // basically, this masks each vector priority with the vector enable, pending status and whether there is an external interrupt on the
        // corresponding line.
        // if enabled and (pending OR external interrupt), this yields the priority, otherwise just a 0.
        // we also check if the register is being written, in that case we use the data to be written directly.
        assign masked_prios[i] = if config_reg_we_int[i] ?
            (if config_reg_data_int[i][0] && (config_reg_data_int[i][1] | i_lines[i]) ? config_reg_data_int[i][3:2] : 0 as 2)
        :
            (if config_regs[i][0] && (config_regs[i][1] | i_lines[1]) ? (config_regs[i][3:2]) : (0 as 2))
        ;
    }
    import ArbitrationPackage::*;
    var max_index: logic<3>;
    var max_prio: logic<2>;
    inst arbitration: ArbitrationTree::<ArbitrationPackage::ArbitrationPolarity::MAX> (
        values_i: masked_prios,
        index_o: max_index,
        prio_o: max_prio,
    );

    // some machinery to handle interrupt dispatch
    always_comb {
        dispatching = {0,0,0,0,0,0,0,0};
        // if the current active max priority is greater than the current running priority
        if max_prio >: prio_stack[current_depth] {
            // set the corresponding interrupt as being dispatched
            dispatching[max_index] = 1;
        }
        // if we want to return from an interrupt
        else if i_return {
            // if we are returning, check to which prio, and if we have anything more urgent to do
            if max_prio >: prio_stack[current_depth - 1] {
                // in that case, we want to tail chain the current max active interrupt
                dispatching[max_index] = 1;
            }
        }
    }
    // this looks stupid but idk how to make verilator swallow anything else
    assign dispatch = dispatching[0] | dispatching[1] | dispatching[2] | dispatching[3] | dispatching[4] | dispatching[5] | dispatching[6] | dispatching[7];
    // state machinery for interrupt dispatch
    always_ff {
        if_reset {
            // state stack
            prio_stack = {0,0,0,0};
            id_stack = {0,0,0,0};
            current_depth = 0;
            // latched dispatch status
            dispatch_latch = 0;
        } else {
            // if we are dispatching an interrupt raw
            if dispatch & !i_return {
                // push current state to the stack
                current_depth += 1;
                prio_stack[current_depth + 1] = max_prio;
                id_stack[current_depth + 1] = max_index;
            } else if i_return { // otherwise if we are returning
                // tail chain
                if dispatch {
                    id_stack[current_depth] = max_index;
                    prio_stack[current_depth] = max_prio;
                } // if not tail chaining, pop current context from the stack
               else {
                current_depth -= 1;
               }
            } 
            // latch current dispatch state
            if dispatch & !dispatch_latch {
                dispatch_latch = 1;
            }
            else {
                dispatch_latch = 0;
            }
        }
    }

}

#[test(nclic)]
embed (inline) sv{{{
    module test;
        import veryl_csr_CsrPkg::*;
        logic i_clk;
        logic i_rst;
        logic i_csr_ena;
        CsrAddr i_csr_addr;
        logic [31:0] i_rs1_data;
        Reg i_rs1;
        Reg i_rd;
        CsrOp i_csr_op;
        logic [31:0] o_data;
        logic i_return;
        logic o_dispatch;
        logic [1:0] o_depth;
        logic [7:0] i_lines;
        hippo_nclic_veryl___NCLIC__8 dut (
            .i_clk,
            .i_rst,
            .i_csr_ena,
            .i_csr_addr,
            .i_rs1_data,
            .i_rs1,
            .i_rd,
            .i_csr_op,
            .i_return,
            .o_dispatch,
            .o_depth,
            .i_lines
        );
        initial begin
            i_rst = 0;
            i_clk = 0;
            i_return = 0;
            i_lines = 0;
            #15 i_rst = 1;
        end

        always #10 i_clk = ~i_clk; 

        initial begin
            #20;
            // int0 = prio 3 pending 0 ena 1
            i_csr_addr = 'h020;
            i_csr_ena = 1;
            i_rs1_data = 'b1101;
            i_rs1 = 'b00000;
            i_rd = 'b00001;
            i_csr_op = CsrOp_CSRRW;
            #20;
            assert(o_dispatch == 0 && o_depth == 0) else $error("fail cycle 1");
            // let it marinate
            i_csr_ena = 0;
            i_rs1_data = 0;
            i_rs1 = 0;
            i_rd = 0;
            i_csr_addr = 0;
            i_csr_op = CsrOp_ECALL;
            #20;
            assert(o_dispatch == 0 && o_depth == 0) else $error("fail cycle 2");
            // int1 = prio 1 pending 1 ena 1
            i_csr_addr = 'h021;
            i_csr_ena = 1;
            i_rs1_data = 'b0111;
            i_rs1 = 'b00000;
            i_rd = 'b00001;
            i_csr_op = CsrOp_CSRRW;
            #20;
            assert(o_dispatch == 1 && o_depth == 1)             
             else $error("fail cycle 3: simple dispatch expected depth 1 dispatch 1 got depth %d dispatch %d", o_depth, o_dispatch);
            // let it marinate again
            i_csr_ena = 0;
            i_rs1_data = 0;
            i_rs1 = 0;
            i_rd = 0;
            i_csr_addr = 0;
            i_csr_op = CsrOp_ECALL;
            #20;
            assert(o_dispatch == 0 && o_depth == 1)
             else $error("fail cycle 4: running post dispatch, expected depth 1, dispatch 0 got depth %d dispatch %d", o_depth, o_dispatch);
            // int2 = prio 3 pending 1 ena 1
            i_csr_addr = 'h022;
            i_csr_ena = 1;
            i_rs1_data = 'b1111;
            i_rs1 = 'b00000;
            i_rd = 'b00001;
            i_csr_op = CsrOp_CSRRW;
            #20;
            assert(o_dispatch == 1 && o_depth == 2)
             else $error("fail cycle 5: preemption, expected depth 2 dispatch 1, got depth %d dispatch %d", o_depth, o_dispatch);
            // let it marinate
            i_csr_ena = 0;
            i_rs1_data = 0;
            i_rs1 = 0;
            i_rd = 0;
            i_csr_addr = 0;
            i_csr_op = CsrOp_ECALL;
            #20;
            assert(o_dispatch == 0 && o_depth == 2)
             else $error("fail cycle 6: running under preemption, expected depth 2 dispatch 0 got depth %d dispatch %d", o_depth, o_dispatch);
            // int3 = prio 3 pending 1 ena 1
            i_csr_addr = 'h020;
            i_csr_ena = 1;
            i_rs1_data = 'b0010;
            i_rs1 = 'b00000;
            i_rd = 'b00001;
            i_csr_op = CsrOp_CSRRS;
            #20;
            assert(o_dispatch == 0 && o_depth == 2)
             else $error("fail cycle 7: blocking same prio, expected depth 2 dispatch 0 got depth %d dispatch %d", o_depth, o_dispatch);
            i_csr_addr = 'h020;
            i_csr_ena = 0;
            i_rs1_data = 'b0000;
            i_rs1 = 'b00000;
            i_rd = 'b00000;
            i_csr_op = CsrOp_ECALL;
            i_return = 1;
            #20;
            assert(o_dispatch == 1 && o_depth == 2)
             else $error("fail cycle 8: tail chaining same prio, expected depth 2 dispatch 1 got depth %d dispatch %d", o_depth, o_dispatch);
            #20;
            assert(o_dispatch == 0 && o_depth == 1)
             else $error("fail cycle 9: return, expected depth 1, dispatch 0, got depth %d dispatch %d", o_depth, o_dispatch);
            #20;
            assert(o_dispatch == 0 && o_depth == 0)
             else $error("fail cycle 10: return, expected depth 0, dispatch 0, got depth %d dispatch %d", o_depth, o_dispatch);
            i_return = 0;
            #20;
            // external interrupt 1, should raise interrupt at prio 1
            i_lines = 'b00000010;
            #20;
            assert(o_dispatch == 1 && o_depth == 1)
             else $error("fail cycle 11: external interrupt 1");
            #20;
            assert(o_dispatch == 0 && o_depth == 1)
             else $error("fail cycle 12: redispatched self when external line held high");
            i_lines = 0;
            i_return = 1;
            #20;
            assert(o_dispatch == 1 && o_depth == 1)
             else $error("fail cycle 13: did not redispatch self after being pended during run");
            i_return = 1;
            #20;
            assert(o_dispatch == 0 && o_depth == 0)
             else $error("fail cycle 14: did not return from the external interrupt properly");

            $finish;
        end
    endmodule
}}}
