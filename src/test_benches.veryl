#[test(arbitration)]
{
module instantiate_arb () {
    var values: logic<2> [8];
    inst max: ArbitrationTree::<ArbitrationPackage::ArbitrationPolarity::MAX> (
        values_i: values,
        index_o: _,
        prio_o: _,
    );
    inst min: ArbitrationTree::<ArbitrationPackage::ArbitrationPolarity::MIN> (
        values_i: values,
        index_o: _,
        prio_o: _,
    );
}
embed (inline) sv{{{
    module test_arb;
        logic[1:0] values [0:7];
        logic[2:0] index_max;
        logic[1:0] prio_max;
        logic[2:0] index_min;
        logic[1:0] prio_min;
        hippo_nclic_veryl___ArbitrationTree__ArbitrationPackage_ArbitrationPolarity_MAX max_tree(
            .values_i(values),
            .index_o(index_max),
            .prio_o(prio_max)
        );
        hippo_nclic_veryl___ArbitrationTree__ArbitrationPackage_ArbitrationPolarity_MIN min_tree(
            .values_i(values),
            .index_o(index_min),
            .prio_o(prio_min)
        ); 
        initial begin
            values = {3,1,2,0,0,1,2,3};
            #10;
            assert (prio_min == 0) else $error("min prio 1 broken");
            assert (prio_max == 3) else $error("max prio 1 broken");
            assert (index_min == 3) else $error("min id 1 broken");
            assert (index_max == 0) else $error("max id 1 broken");
            #10;
            values = {1,3,2,0,0,1,2,3};
            #10;
            assert (prio_min == 0) else $error("min prio 2 broken");
            assert (prio_max == 3) else $error("max prio 2 broken");
            assert (index_min == 3) else $error("min id 2 broken");
            assert (index_max == 1) else $error("max id 2 broken");
            #10;
            values = {2,1,3,0,0,1,2,3};
            #10;
            assert (prio_min == 0) else $error("min prio 3 broken");
            assert (prio_max == 3) else $error("max prio 3 broken");
            assert (index_min == 3) else $error("min id 3 broken");
            assert (index_max == 2) else $error("max id 3 broken");
            #10;
            values = {0,1,2,3,0,1,2,3};
            #10;
            assert (prio_min == 0) else $error("min prio 4 broken");
            assert (prio_max == 3) else $error("max prio 4 broken");
            assert (index_min == 0) else $error("min id 4 broken");
            assert (index_max == 3) else $error("max id 4 broken");
            #10;
            values = {0,1,2,0,3,1,2,3};
            #10;
            assert (prio_min == 0) else $error("min prio 5 broken");
            assert (prio_max == 3) else $error("max prio 5 broken");
            assert (index_min == 0) else $error("min id 5 broken");
            assert (index_max == 4) else $error("max id 5 broken");
            #10;
            values = {1,1,2,0,0,3,2,3};
            #10;
            assert (prio_min == 0) else $error("min prio 6 broken");
            assert (prio_max == 3) else $error("max prio 6 broken");
            assert (index_min == 3) else $error("min id 6 broken");
            assert (index_max == 5) else $error("max id 6 broken");
            #10;
            values = {2,1,2,0,0,1,3,3};
            #10;
            assert (prio_min == 0) else $error("min prio 7 broken");
            assert (prio_max == 3) else $error("max prio 7 broken");
            assert (index_min == 3) else $error("min id 7 broken");
            assert (index_max == 6) else $error("max id 7 broken");
            #10;
            values = {3,1,2,0,0,1,2,3};
            #10;
            assert (prio_min == 0) else $error("min prio 8 broken");
            assert (prio_max == 3) else $error("max prio 8 broken");
            assert (index_min == 3) else $error("min id 8 broken");
            assert (index_max == 0) else $error("max id 8 broken");
            #10;
            values = {0,1,2,3,3,2,1,0};
            #10;
            assert (prio_min == 0) else $error("min prio 9 broken");
            assert (prio_max == 3) else $error("max prio 9 broken");
            assert (index_min == 0) else $error("min id 9 broken");
            assert (index_max == 3) else $error("max id 9 broken");
            #10;
            values = {1,0,2,3,3,2,1,0};
            #10;
            assert (prio_min == 0) else $error("min prio 10 broken");
            assert (prio_max == 3) else $error("max prio 10 broken");
            assert (index_min == 1) else $error("min id 10 broken");
            assert (index_max == 3) else $error("max id 10 broken");
            #10;
            values = {2,1,0,3,3,2,1,0};
            #10;
            assert (prio_min == 0) else $error("min prio 11 broken");
            assert (prio_max == 3) else $error("max prio 11 broken");
            assert (index_min == 2) else $error("min id 11 broken");
            assert (index_max == 3) else $error("max id 11 broken");
            #10;
            values = {3,1,2,0,3,2,1,0};
            #10;
            assert (prio_min == 0) else $error("min prio 12 broken");
            assert (prio_max == 3) else $error("max prio 12 broken");
            assert (index_min == 3) else $error("min id 12 broken");
            assert (index_max == 0) else $error("max id 12 broken");
            #10;
            values = {3,1,2,3,0,2,1,0};
            #10;
            assert (prio_min == 0) else $error("min prio 13 broken");
            assert (prio_max == 3) else $error("max prio 13 broken");
            assert (index_min == 4) else $error("min id 13 broken");
            assert (index_max == 0) else $error("max id 13 broken");
            #10;
            values = {2,1,2,3,3,0,1,0};
            #10;
            assert (prio_min == 0) else $error("min prio 14 broken");
            assert (prio_max == 3) else $error("max prio 14 broken");
            assert (index_min == 5) else $error("min id 14 broken");
            assert (index_max == 3) else $error("max id 14 broken");
            #10;
            values = {1,1,2,3,3,2,0,0};
            #10;
            assert (prio_min == 0) else $error("min prio 15 broken");
            assert (prio_max == 3) else $error("max prio 15 broken");
            assert (index_min == 6) else $error("min id 15 broken");
            assert (index_max == 3) else $error("max id 15 broken");
            #10;
            values = {1,1,2,3,3,2,1,0};
            #10;
            assert (prio_min == 0) else $error("min prio 16 broken");
            assert (prio_max == 3) else $error("max prio 16 broken");
            assert (index_min == 7) else $error("min id 16 broken");
            assert (index_max == 3) else $error("max id 16 broken");
            #10;
            $finish;
        end
    endmodule
}}}
}